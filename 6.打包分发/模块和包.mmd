Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# 包和模块

## 导入包和模块的方式

### from语句导入

#### 作用

##### 为什么使用模块

###### 代码重用

###### 系统命名划分

###### 实现共享服务和数据

#### 语法

##### 导入包和模块的方式

###### 注意

####### 1\.导入模块后具体做了什么事情

######## 第一次导入时

######### 1\.找到模块文件，在自己当前的命名空间中，执行所有代码，

######### 2\.创建一个模块对象，所有模块内的顶级变量以属性的形式绑定到模块对象上

######### 3\.在import位置，引入import后面的变量名称到当前命名空间中，

######## 第二次导入时

######### 执行上述第三个步骤，没有导入新的模块对象。 

######### 注意点：

########## from a import  \*  和 from a import   b 内存消耗是一样的

########## im\.reload  重新导入模块对象

####### 2\.从哪个位找到需要导入的模块

######## 第一次导入时

######### 按照模块检索路径去查找

########## 第一级

########### 内置模块

########## 第二级

########### sys\.path 

############ 构成

############# 当前目录

############## import  os

############## os\.getcwd\(\)

############## 当前目录同名模块会覆盖内置模块

############# 环境变量PYTHONPAYTH中指定的路径列表

############## 查看特定路径

############## 后缀名为\.pth文件

############# 特定路径下的\.pth文件中的路径列表

############# python安装路径下的lib 库中搜索

########### 追加路径方式

######## 第二次导入时

####### 3\.导入模块的常见场景

######## 局部导入

######### 在某个局部范围内导入模块

########## 在其他范围内无法使用

######### 如果想要全局范围都能使用，在文件顶部导入

######### 使用场景

########## 在函数用使用impor语句，只用使用时才会被加载

######## 覆盖导入

######### 场景1

########## 自定义模块和内置标准模块重名

########### 根据前者的存储位置，有可能后者会覆盖前者

############ 主要看sys\.path 的顺序

########## 结论

########### 自定义模块不要和内置模块重名

######### 场景2

########## 自定义模块和内置模块\(如sys\)重名

########### 内置模块覆盖自定义

########## 想用自定义模块

########### 使用 from\.\.\.\.\.\.import\.\.\.\.\. 指明绝对路径进行导入

######## 循环导入

######### 假设有两个模块A 和 B 

######### 模块A中导入了B，模块B中也导入了A，这样就造成了循环导入

######### 可以选用局部导入，懒加载的形式解决循环导入；或者结构设计上调整

######## 可选导入

######### 概念

########## 两个功能相近的包，根据需求优先选择其中一个导入

######### 场景

########## 有两个包A和B都实现了相同的功能。优先使用A，使用B做备选

######### 实现

########## try\.\.\.\.except

######## 包内导入

######### 绝对导入和相对导入

########## 理论

########### 相对导入和绝对导入，时相对于包内导入而言的

########### 包内导入，包内模块导入包内模块

########## 概念

########### 绝对

############ 参照sys\.path 路径进行检索

############ 例如

############# 指明包名或者模块名

############## import a

############## from a import b

########### 相对

############ 使用相对路径

############# 。

############## 使用模块名称获取当前目录

############# 。。

############## 根据模块名称获取上级目录

############ 例如

############# from 。 import b

############# form \.\. import b

############ 注意

########## 补充

########## 结论

########### 正确做法

############ 包内导入

############# 使用相对路径

############ 包外导入

############# 使用绝对路径

#### 特例
